#!/bin/ksh

# WORK IN PROGRESS - not ready for use.

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#											#
#	Copyright (c) 2023, Ian LeCorbeau <I-LeCorbeau (at) protonmail (dot) com>	#
#											#
#	Permission to use, copy, modify, and/or distribute this software for any	#
#	purpose with or without fee is hereby granted, provided that the above		#
#	copyright notice and this permission notice appear in all copies.		#
#											#
#	THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES	#
#	WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF		#
#	MERCHANTABILITY AND FITNESS IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR		#
#	ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES		#
#	WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN		#
#	ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF		#
#	OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.			#
#											#
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

# Script to automatically build/update the packages in the source tree.

usage() {
	printf '%s\n' "
Build or update one or more package. Valid options:

-b	build package(s)
-h	print this help message
-s	sign package(s) with signify
-t	custom target where .debs and SHA256(.sig) should go
-u	update package(s)

For the -b and -u options, one or more package can be supplied
as arguments. When no package name is given, then all packages
are built/signed/updated. The -s option does not take any package
as an argument since the SHA256(.sig) files need to be regenerated
after a package was updated.

Example usage:

Build and sign all packages and move everything to a directory in .local/packages:
./mkpkg -t /home/<USERNAME>/.local/packages -b -s

Update and sign a single package:
./mkpkg -u oksh
"
}

get_src() {
	local _src="$1"
	
	if [[ "$SRC" = debian ]]; then
		apt-get source "$_src"
	else
		printf '%s\n' "Fetching source..."
		/usr/bin/wget "$SRC" -q --show-progress
		extract "$SRC"
	fi
}

get_builddeps() {
	local _cmd _src="$1"

	if command -v /usr/bin/doas >/dev/null 2>&1; then
		_cmd="doas"
	else
		_cmd="sudo"
	fi

	mk-build-deps --install --root-cmd "$_cmd" "$_src"
}

do_patch() {
	local _patches

	set -A _patches -- patches/"$PATCHES"

	for _file in "${_patches[@]}"; do
		patch -d "$PKG_NAME"-"$VERSION" < "$_file"
	done
}

# Building packages by cd'ing into dir and running their build script.
build_pkg() {
	local _pkgs

	shift
	if [ $# -eq 0 ]; then
		# we most definitely want word splitting.
		# shellcheck disable=SC2046
		set -A _pkgs -- $(cat pkgs.list)
	else
		set -A _pkgs -- "$@"
	fi

	for pkg in "${_pkgs[@]}"; do
		cd "$pkg" || exit
		. "$(pwd)"/"$pkg".rbuild
		echo "Fetching source..."
		get_src "$pkg"
		echo "getting build depends..."
		get_builddeps "$pkg"
		echo "$pkg"
		echo "patching..."
		[[ -n "$PATCHES" ]] && do_patch "$pkg"
		echo "Preparing..."
		if typeset -f prepare > /dev/null; then
			prepare
		fi
		cd "$PKG_NAME"-"$VERSION" || exit
		echo "Building..."
		do_build
		echo "Cleaning up..."
		clean
		cd ..
		cd ..
		echo "moving package to TARGET"
		mv -- *.deb "$TARGET"
	done

}

# Sign all debs with signify.
sign_pkgs() {
	local _seckey="$1"

	cd "$TARGET" || exit

	# Generate BSD-style checksum file
	/usr/bin/sha256sum --tag -- * > SHA256

	# Sign
	/usr/bin/signify-openbsd -S -s "$_seckey" -m SHA256 -x SHA256.sig

	/usr/bin/cat SHA256 >> SHA256.sig
}

# Let's go
TARGET="/home/$USER/.local/src/packages"
SEC_KEY=

# Making sure TARGET exists
mkdir -p "$TARGET"

while getopts bhus:t: args; do
	case "$args" in
		b)	build_pkg "$@" ;;
		h)	usage ;;
		s) 	SEC_KEY="$OPTARG"
			sign_pkgs "$SEC_KEY" ;;
		t)	TARGET="$OPTARG" ;;
		u) 	update_pkgs ;;
		*) 	usage ;;
	esac
done
shift $((OPTIND-1))
